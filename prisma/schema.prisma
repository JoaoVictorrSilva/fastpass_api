// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_type {
    ADMIN
    COMMON
    SUPPLIER
}
model user {
    id Int @id @default(autoincrement())
    name String
    email String @unique
    password String
    user_type user_type
    company_id Int?
    cpf String @unique
    phone String?
    birth_date DateTime
    refresh_token String?
    balance Int @default(0)
    company company? @relation(fields: [company_id], references: [id])

    extracts_from  extract[]  @relation("ExtractFrom") 
    extracts_to    extract[]  @relation("ExtractTo")   
    tickets        tickets[]

    created_at DateTime @default(now())  
    updated_at DateTime? @updatedAt
}

model company {
    id Int @id @default(autoincrement())
    name String
    cnpj String @unique
    created_at DateTime @default(now())  
    updated_at DateTime? @updatedAt
    products product[]
    users user[]
}

enum TypeMoviment {
  DEBIT
  CREDIT
}

model extract {
    id Int @id @default(autoincrement())
    value Int
    moviment TypeMoviment // debito, credito
    description String

    user_from     user      @relation("ExtractFrom", fields: [user_from_id], references: [id])
    user_from_id Int
    user_to       user      @relation("ExtractTo", fields: [user_to_id], references: [id])
    user_to_id Int
    created_at DateTime @default(now()) // data e hora
    updated_at DateTime? @updatedAt
}

model product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  value       Int
  category    String
  company  company @relation(fields: [company_id], references: [id])
  company_id Int

  tickets     tickets[]

  created_at  DateTime @default(now())
  updated_at  DateTime? @updatedAt
}

enum TicketStatus {
  WAITING_PAYMENT
  PAID
  CANCELED
}

model tickets {
  id          Int      @id @default(autoincrement())
  confirmation_hash String @unique
  status      TicketStatus
  user        user     @relation(fields: [user_id], references: [id])
  user_id     Int
  product     product  @relation(fields: [product_id], references: [id])
  product_id  Int
  created_at  DateTime @default(now())
  updated_at  DateTime? @updatedAt
}